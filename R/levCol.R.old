#' Manages the levels and the colors of the LCZ columns
#'
#' @param sf
#' @param column
#' @param ...
#' @import dplyr
#' @importFrom grDevices palette.colors
#'
#' @return
#' @export
#'
#' @examples
levCol<-function(sf,column,...){
  args<-list(...)
  uniqueData<-sf[column] |> sf::st_drop_geometry()  |> unique() # Attention unique outputs a list of length 1
  uniqueData<-levels(uniqueData[,1]) |> as.character() |> as.vector()
  class(uniqueData)|> print()


  argNames<-names(args)
  indCol<-grep(x=argNames, pattern="cols")
  argCol<-args[indCol]
  argLev<-args[-indCol]
  typeLevels<-names(argLev)

###### Dealing with the levels of the specified column
  # Case 0 : no arguments were specified in ...
if ( length(args)==0 ){
  print("You didn't specify any levels or colors.")
  print(paste0(" Levels will be set to the list of unique values in ", column, "."))
  print(uniqueData)

  if (length(uniqueData)>36) {stop("The number of levels must be less than 37 for the map to be readable,
              you may want to group some of the levels using LCZgroup2 function ") } else {
    print(" A random color will be chosen for each of these unique values ")

    colVec<-grDevices::palette.colors(n=length(uniqueData),palette="Polychrome 36")

  }

 typeLevels<-uniqueData
 levelsAndColors<-list(levels=typeLevels,colors=colVec)
}

  #case 0.2 : levels are specified in a single vector or only one value is specified : later
if(length(argLev)==1){stop(
    "There is only one value for level type or they are specidfied into a single vector,
    this case will be dealt with later")}

  #case 1 : levels are specified as separate arguments

if ( length(argLev)>1 ) {
    if(prod(uniqueData%in%typeLevels)==0){
    warning(paste0("Some levels are presents in the ",
                   column," column of the ",
                    sf, " file, but not in your data. Those levels were added."
                   ))
    typeLevels<-unique(
      c(uniqueData,typeLevels)
    )
  }

  if (prod(uniqueData%in%typeLevels)==1){
    if (length(uniqueData)<length(typeLevels)){
      print("Some of the levels you specified are not present in sample data, but are kept as possible levels.")
     }
  # case 1.1 : levels are specified, but colors are not
    if ( length(indCol)==0){
      if (prod(areColors(argLev))==0){
        print("You didn't specify a color vector, a random color will be chosen for each level of data")
        colVec<-palette.colors(n=length(typeLevels), palette="Polychrome 36")
      }
     else
    {
      print(" You didn't specify a color vector, but it seems you specified your colors as values of LCZ types,
      these will be kept as colors")
      colVec<-argLev
    }
    levelsAndColors<-list(levels=typeLevels,colors=colVec)
  }

  if (length(argCol)>0 && length(argCol)== length(argLev)){
   colVec<-argCol
   }
    levelsAndColors<-list(levels=typeLevels,colors=colVec)
  }
  return(levelsAndColors)
}

}




#library(lczexplore)
# redonBDTgrouped<-LCZgroup2(redonBDT,column="LCZ_PRIMARY",outCol = "grouped",urban=c("1","2","3","4","5","6","7","8","9"),
#                           industry="10",
#                           vegetation=c("101","102","103","104"),
#                           impervious="105",pervious="106",water="107",
#                            cols=c("red","black","green","grey","burlywood","blue"))

# test<-levCol(sf=redonBDTgrouped,column="grouped")

test<-levCol(sf=redonBDTgrouped,column="grouped",urban=c("1","2","3","4","5","6","7","8","9"),
       industry="10",
       vegetation=c("101","102","103","104"),
       impervious="105",pervious="106",water="107",
       cols=c("red","black","green","grey","burlywood","blue"))

# levCol(redonBDTgrouped,column="grouped", levels=c("urban","industry","vegetation","impervious","pervious","water"),
#                          cols=c("red","black","green","grey","burlywood","blue"))
#
# levCol(redonBDTgrouped, levels=c("urban"="red","industry"="black",
#                                  "vegetation"="green",
#                                  "impervious"="grey","pervious"="burlywood","water"="blue"))
